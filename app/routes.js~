"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config = require("config");
const Router = require("koa-router");
const auth_1 = require("./controllers/auth");
const users_1 = require("./controllers/users");
const bills_1 = require("./controllers/bills");
const router = new Router();
exports.router = router;
const users = new users_1.UsersController();
const auth = new auth_1.AuthController();
const bills = new bills_1.BillsController();
const usersProtectedRoute = config.get('appConfig.apiPrefix') + 'users/';
const billsProtectedRoute = config.get('appConfig.apiPrefix') + 'bills/';
const authPublicRoute = config.get('appConfig.publicApiPrefix') + 'auth/';
const healthcheckRoute = config.get('appConfig.publicApiPrefix') + 'healthcheck';
router
    /**
     * @api {get} /api/public/healthcheck
     * @apiName healthcheck
     * @apiGroup healthcheck
     *
     * @apiDescription Всегда вернет 200, когда приложение запущено
     *
     * @apiSuccess {Number} result 1
     *
     * @apiSuccessExample {json} Success-Response:
     *     HTTP/1.1 200 OK
     *     {
     *       "result": 1
     *     }
     */
    .get(healthcheckRoute, (ctx, next) => {
    ctx.body = 1;
    next();
})
    /**
     * @api {post} /api/public/auth/login
     * @apiName login
     * @apiGroup Auth
     *
     * @apiDescription Авторизует пользователя. В ответ на запрос отдаст JWT-Токен.
     * Его необходимо указывать в заголовке Authorization.
     *
     * @apiParam {String} email Почта пользователя.
     * @apiParam {String} password Пароль пользователя.
     *
     * @apiSuccess {String} result jwtToken
     *
     * @apiSuccessExample {json} Success-Response:
     *     HTTP/1.1 200 OK
     *     {
     *       "result":
     *          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIifQ.dtxWM6MIcgoeMgH87tGvsNDY6cHWL6MGW4LeYvnm1JA"
     *     }
     */
    .post(authPublicRoute + 'login', auth.login)
    /**
     * @api {get} /api/users/items
     * @apiName getUsers
     * @apiGroup User
     *
     * @apiDescription Возвращает список пользователей
     *
     * * @apiHeader (Authorization) authorization Authorization value.
     * @apiHeaderExample Headers-Example:
     *   { "Authorization": "Bearer :jwtToken" }
     *
     * @apiSuccess {Array} result Массив созданных пользователей.
     */
    .get(usersProtectedRoute + 'items', users.getItems)
    /**
     * @api {get} /api/users/item
     * @apiName getUser
     * @apiGroup User
     *
     * @apiDescription Возвращает пользователя по id
     *
     * @apiHeader (Authorization) authorization Authorization value.
     * @apiHeaderExample Headers-Example:
     *   { "Authorization": "Bearer :jwtToken" }
     *
     * @apiParam {Number} id Идентификатор пользователя.
     *
     * @apiSuccess {Object} result пользователь.
     */
    .get(usersProtectedRoute + 'item', users.getItem)
    /**
     * @api {get} /api/bills/items
     * @apiName getItems
     * @apiGroup Bills
     *
     * @apiDescription Возвращает все палтёжные данные
     *
     * @apiHeaderExample Headers-Example:
     *   { "Authorization": "Bearer :jwtToken" }
     *
     * @apiSuccess {Object} result Массив платёжных данных
     *
    */
    .get(billsProtectedRoute + 'items', bills.getItems)
    /**
     * @api {get} /api/bills/range
     * @apiName getItems
     * @apiGroup Bills
     *
     * @apiDescription Возвращает все палтёжные данные в отрезке
     *
     * @apiHeaderExample Headers-Example:
     *   { "Authorization": "Bearer :jwtToken" }
     *
     * @apiParam {String} start Начало отрезка.
     * @apiParam {String} end Конец отрезка.
     *
     * @apiSuccess {Object} result Массив платёжных данных
     *
    */
    .get(billsProtectedRoute + 'range', bills.getRange)
    /**
     * @api {get} /api/bills/items
     * @apiName getItems
     * @apiGroup Bills
     *
     * @apiDescription Возвращает последнии несколько платёжных данных
     *
     * @apiHeaderExample Headers-Example:
     *   { "Authorization": "Bearer :jwtToken" }
     *
     * @apiParam {Number} quantity Колличество
     *
     * @apiSuccess {Object} result Массив платёжных данных
     *
    */
    .get(billsProtectedRoute + 'last', bills.getLast);
//# sourceMappingURL=routes.js.map